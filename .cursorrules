// Cursor Todo Appのルール設定

// プロジェクトのナレッジベースを活用するためのルール
@knowledge {
  // プロジェクトのナレッジベースを参照
  @file KNOWLEDGE.md

  // 特定のファイルタイプに対するルール
  @match *.tsx {
    // Reactコンポーネントに関する指示
    あなたはNext.jsとReactの専門家です。
    このプロジェクトはTypeScriptとTailwind CSSを使用しています。
    クライアントコンポーネントには必ず"use client"ディレクティブを追加してください。
    コードは簡潔で読みやすく、TypeScriptの型を適切に使用してください。
  }

  @match *.ts {
    // TypeScriptファイルに関する指示
    TypeScriptの型定義は明確で再利用可能なものにしてください。
    インターフェースとタイプエイリアスを適切に使い分けてください。
  }

  @match *.css {
    // CSSファイルに関する指示
    Tailwind CSSのユーティリティクラスを優先的に使用してください。
    カスタムCSSは最小限に抑えてください。
  }
}

// 一般的なコーディングスタイルに関するルール
@global {
  // 日本語でのコミュニケーション
  日本語で応答してください。
  
  // コードスタイル
  コードは簡潔で読みやすく、適切にコメントを入れてください。
  変数名や関数名は意味が明確な名前を使用してください。
  
  // エラー処理
  エラー処理は適切に行い、ユーザーに分かりやすいエラーメッセージを表示してください。
  
  // パフォーマンス
  パフォーマンスを考慮したコードを書いてください。不必要な再レンダリングを避けてください。
  
  // 開発ワークフロー
  コードの修正や機能追加を行う場合は、必ず新しいブランチを作成してください。
  ブランチ名は「feature/機能名」または「fix/修正内容」の形式にしてください。
  修正が完了したら、プルリクエストを作成して変更内容をレビューしてもらってください。
  直接mainブランチに変更をコミットすることは避けてください。
}

// 特定のファイルに対するルール
@file src/app/components/TodoList.tsx {
  このコンポーネントはTodoアプリの中心的なコンポーネントです。
  ローカルストレージを使用してタスクを保存・読み込みします。
  タスクの追加、完了状態の切り替え、削除の機能を提供します。
}

@file src/app/components/TodoForm.tsx {
  このコンポーネントは新しいタスクを入力するためのフォームです。
  入力値のバリデーションを適切に行ってください。
  空の入力は送信できないようにしてください。
}

@file src/app/components/TodoItem.tsx {
  このコンポーネントは個々のタスクを表示します。
  タスクの完了状態によって表示を変更します。
  削除ボタンのクリックでタスクを削除できます。
} 